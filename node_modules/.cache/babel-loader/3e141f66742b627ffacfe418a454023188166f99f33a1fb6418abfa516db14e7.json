{"ast":null,"code":"var _jsxFileName = \"/home/maver02/Projects/Infrastructure_suite_project/Website/tic-tac-toe/src/App.js\",\n  _s = $RefreshSig$();\n// Import necessary libraries and functions\nimport React, { useState } from 'react';\nimport './styles.css'; // Import CSS for styling\nimport Board from './components/Board.js'; // Import Board component\nimport Square from './components/Square.js'; // Import Square component\n\n// Game component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Game() {\n  _s();\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n\n  // Handle the play\n  function handlePlay(squareIndex) {\n    const squaresCopy = [...currentSquares];\n    if (calculateWinner(squaresCopy) || squaresCopy[squareIndex]) {\n      return;\n    }\n    squaresCopy[squareIndex] = xIsNext ? 'X' : 'O';\n    setHistory(history.slice(0, currentMove + 1).concat([squaresCopy]));\n    setCurrentMove(currentMove + 1);\n  }\n\n  // Jump to a specific move\n  function jumpTo(move) {\n    setCurrentMove(move);\n  }\n\n  // Generate move history\n  const moves = history.map((stepSquares, move) => {\n    const desc = move ? 'Go to move #' + move : 'Go to game start';\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => jumpTo(move),\n        className: move === currentMove ? 'selected' : '',\n        children: desc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)\n    }, move, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this);\n  });\n\n  // Determine the winner\n  const winner = calculateWinner(currentSquares);\n  const winningLine = winner ? winner.line : null;\n\n  // Render the game\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        xIsNext: xIsNext,\n        squares: currentSquares,\n        onPlay: handlePlay,\n        winningLine: winningLine\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: moves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n// Calculate the winner of the game\n_s(Game, \"xZZdy1/aP1agxyjHn6CL01lXnXc=\");\n_c = Game;\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {\n        winner: squares[a],\n        line: [a, b, c]\n      };\n    }\n  }\n  return null;\n}\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","Board","Square","jsxDEV","_jsxDEV","Game","_s","history","setHistory","Array","fill","currentMove","setCurrentMove","xIsNext","currentSquares","handlePlay","squareIndex","squaresCopy","calculateWinner","slice","concat","jumpTo","move","moves","map","stepSquares","desc","children","onClick","className","fileName","_jsxFileName","lineNumber","columnNumber","winner","winningLine","line","squares","onPlay","_c","lines","i","length","a","b","c","$RefreshReg$"],"sources":["/home/maver02/Projects/Infrastructure_suite_project/Website/tic-tac-toe/src/App.js"],"sourcesContent":["// Import necessary libraries and functions\nimport React, { useState } from 'react';\nimport './styles.css'; // Import CSS for styling\nimport Board from './components/Board.js'; // Import Board component\nimport Square from './components/Square.js'; // Import Square component\n\n\n// Game component\nexport default function Game() {\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n\n  // Handle the play\n  function handlePlay(squareIndex) {\n    const squaresCopy = [...currentSquares];\n    if (calculateWinner(squaresCopy) || squaresCopy[squareIndex]) {\n      return;\n    }\n    squaresCopy[squareIndex] = xIsNext ? 'X' : 'O';\n    setHistory(history.slice(0, currentMove + 1).concat([squaresCopy]));\n    setCurrentMove(currentMove + 1);\n  }\n\n  // Jump to a specific move\n  function jumpTo(move) {\n    setCurrentMove(move);\n  }\n\n  // Generate move history\n  const moves = history.map((stepSquares, move) => {\n    const desc = move ? 'Go to move #' + move : 'Go to game start';\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)} className={move === currentMove ? 'selected' : ''}>\n          {desc}\n        </button>\n      </li>\n    );\n  });\n\n  // Determine the winner\n  const winner = calculateWinner(currentSquares);\n  const winningLine = winner ? winner.line : null;\n\n  // Render the game\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board\n          xIsNext={xIsNext}\n          squares={currentSquares}\n          onPlay={handlePlay}\n          winningLine={winningLine}\n        />\n      </div>\n      <div className=\"game-info\">\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n}\n\n// Calculate the winner of the game\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return { winner: squares[a], line: [a, b, c] };\n    }\n  }\n  return null;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}